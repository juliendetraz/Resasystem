= Resources Configuration

All application models, including the ones on the engines/plugins, can 
be configured using the {{{yaml}}} files placed on {{{config/typus}}}. Files 
under this folder are created using the generator detecting the models 
localed under app/models.

There are two kind of files, the {{{*.yml}}} and the {{{*_roles.yml}}}. Look 
the generated files to see the available options.

== Fields

Define the collection of fields which you want to display on different 
parts of the site. List is for lists, form is for forms.

{{{
Photo:
  fields:
    default: name
    list: name, created_at, category, status
    form: name, body, created_at, status
    csv: name, body
    xml: name, created_at, status
}}}

=== File fields

Upload files works if you follow {{{Paperclip}}} naming conventions. Let's 
say for example your application has a model {{{Photo}}} with an attachment 
called {{{asset}}}.

{{{
class Photo < ActiveRecord::Base

  ##
  # On your database you'll have the following fields:
  #
  #     asset_file_name (string)
  #     asset_content_type (string)
  #     asset_file_size (integer)
  #     asset_updated_at (datetime)
  #

  has_attached_file :asset

end
}}}

If you want to upload files to your application you only need to define 
the attached file name which in this case is {{{asset}}}. Using {{{asset_file_name}}}, 
{{{asset_content_type}}}, {{{asset_file_size}}} and {{{asset_updated_at}}} will 
display data using the database field type.

{{{
Photo:
  fields:
    default: asset
    list: asset_file_name, asset
    form: asset
}}}

WARNING: Previously on **Typus** attachments were defined using the 
{{{<attribute>_file_name}}}. If you are still using this fields you'll see an 
string field and won't be able to upload files.

=== Read only fields

In form fields you can have read only fields and read only fields for 
autogenerated content. These kind of fields will be shown in the form but won't 
be editable. Example with the {{{name}}} attribute being read-only:

{{{
Photo:
  fields:
    ...
    options:
      read_only: name
}}}

=== Auto generated fields

Define {{{auto generated}}} fields.

{{{
Order:
  fields:
    ...
    options:
      auto_generated: tracking_number
}}}

You can then initialize it from the model.

{{{
# app/models/order.rb
class Order < ActiveRecord::Base

  def initialize_with_defaults(attributes = nil, &block)
    initialize_without_defaults(attributes) do
      self.tracking_number = Random.tracking_number
      yield self if block_given?
    end
  end

  alias_method_chain :initialize, :defaults

end
}}}

=== Virtual attribute fields

Define a {{{virtual attributes}}}. (i.e. model which has an slug attribute 
which is generated from the title)

{{{
# app/models/post.rb
class Post < ActiveRecord::Base

  validates_presence_of :title

  def slug
    title.parameterize
  end

end
}}}

Add {{{slug}}} as field and it'll be shown on the listings.

{{{
# config/typus/application.yml
Post:
  fields:
    list: title, slug
}}}

NOTE: When using a virtual attribute you won't be able to search, 
filter or order by that attribute.

== Relationships

The generator will detect which kind of relationships has the model 
and will appear on the listings.

{{{
Post:
  ...
  relationships: users, projects
}}}

== Filters

Define which filters you want to have on an specific model. (i.e. show 
status, author and created_at filters for posts)

{{{
Post:
  ...
  filters: status, author, created_at
}}}

== Order

Set the default display order of the items on a model.

{{{
Post:
  ...
  order_by: name, -created_at
}}}

TIP: Adding minus (-) sign before the attribute will make the order DESC.

== Searches

Define which fields will be used when performing a search on the model.

{{{
Post:
  ...
  search: name, body
}}}

Default search performs a full-text match. For faster searches you 
can use the following operators:

{{{
^: Matches the beginning of the field
=: Matches exactly.
@: Performs a full-text search match. This is the default behavior.
}}}

Example:

{{{
Post:
  ...
  search: =name, body
}}}

== Selectors

Need a selector, to select gender, size, status, the encoding status 
of a video or whatever in the model? 

{{{
Person:
  fields:
    ...
    options:
      selectors: gender, size, status
}}}

From now on the form, if you have enabled them on the list/form you'll 
see a selector with the options that you define in your model.

{{{
# app/models/video.rb
class Video < ActiveRecord::Base
  STATUS = %w(pending encoding encoded error published)
  validates_inclusion_of :status, :in => STATUS
end
}}}

NOTE: If the selector is not defined, you'll see a {{{text field}}} instead of 
a {{{select field}}}.

== Booleans

Boolean text shows {{{true}}} and {{{false}}}, but you can personalize it by 
attribute to match your application requirements.

{{{
# config/typus/application.yml
TypusUser:
  fields:
    default: email, status
    options:
      booleans:
        # attribute: true, false
        default: publicado, no_publicado
        status: ["It's active", "It's inactive"]
}}}

== Date Formats

Date formats allows to define the format of the datetime field.

{{{
# config/typus/application.yml
Post:
  fields:
    ...
    options:
      date_formats:
        published_at: post_short
}}}

{{{
# config/initializers/dates.rb
Date::DATE_FORMATS[:post_short] = '%m/%Y'
Time::DATE_FORMATS[:post_short] = '%m/%y'
}}}

== Actions

Define more actions which will be shown on the requested action.

{{{
Post:
  ...
  actions:
    index: notify_all
    edit: notify
}}}

Add those actions to your admin controllers.

{{{
class Admin::NewslettersController < AdminController

  # Action to deliver emails ...
  def deliver
    ...
    redirect_to :back
  end

end
}}}

For feedback you can use the following flash methods.

* {{{flash[:notice]}}} to deliver feedback.
* {{{flash[:alert]}}} when there's something wrong.

== Exporting data

**Typus** allows to export data. Only XML and CSV exporting methods are 
implemented but you can easily add your own. You will see the export links on 
the sidebar of your resource.

{{{
Order:
  ...
  export: csv, xml
}}}

And the actions for those export options are:

{{{
def export_csv
  # Already implemented but you can overwrite it.
end

def export_xml
  # Already implemented but you can overwrite it.
end
}}}

== Applications

To group resources into an application use {{{application}}}.

{{{
Model:
  ...
  application: CMS
}}}

Models will now appear in the dashboard grouped. When you're updating data on a 
model, you'll see on the sidebar the models of the same group. This will make 
navigation easier between theses grouped models.

== Options

=== Action After Save

After creating a new record you'll be redirected to the record so you can 
continue editing it. If you prefer to be redirected to the main index you can 
owerwrite the setting. This setting can be defined globally or by model.

{{{
Typus::Resource.setup do |config|
  config.action_after_save = :edit
end
}}}

You can also define this option by model.

{{{
Post:
  ...
  options:
    action_after_save: edit
}}}

=== End Year

{{{
Typus::Resource.setup do |config|
  config.end_year = 2015
end
}}}

You can also define this option by model.

{{{
Post:
  ...
  options:
    end_year: 2015
}}}

=== Form Rows

{{{
Typus::Resource.setup do |config|
  config.form_rows = 25
end
}}}

You can also define this option by model.

{{{
Post:
  ...
  options:
    form_rows: 25
}}}

=== Minute Step

{{{
Typus::Resource.setup do |config|
  config.minute_step = 15
end
}}}

You can also define this option by model.

{{{
Post:
  ...
  options:
    minute_step: 15
}}}

=== Nil

{{{
Typus::Resource.setup do |config|
  config.nil = 'nil'
end
}}}

You can also define this option by model.

{{{
Post:
  ...
  options:
    nil: 'nil'
}}}

=== Per Page

{{{
Typus::Resource.setup do |config|
  config.per_page = 15
end
}}}

You can also define this option by model.

{{{
Post:
  ...
  options:
    per_page: 15
}}}

=== Start Year

{{{
Typus::Resource.setup do |config|
  config.start_year = 1990
end
}}}

You can also define this option by model.

{{{
Post:
  ...
  options:
    start_year: 1990
}}}
